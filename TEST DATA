<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>실험 데이터 입출력 앱</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        .toast { visibility: hidden; min-width: 250px; margin-left: -125px; background-color: #333; color: #fff; text-align: center; border-radius: 8px; padding: 16px; position: fixed; z-index: 100; left: 50%; bottom: 30px; opacity: 0; transition: visibility 0s, opacity 0.5s linear; }
        .toast.show { visibility: visible; opacity: 1; }
        .tab-content { display: none; }
        .tab-content.active { display: block; }
        .loader { border: 4px solid #f3f3f3; border-radius: 50%; border-top: 4px solid #3498db; width: 40px; height: 40px; animation: spin 2s linear infinite; margin: 20px auto; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen py-12">
    <div class="w-full max-w-6xl p-8 space-y-8 bg-white rounded-2xl shadow-lg">
        <!-- 탭 메뉴 -->
        <div class="border-b border-gray-200">
            <nav class="-mb-px flex space-x-2" aria-label="Tabs">
                <button id="tab-input" class="whitespace-nowrap py-4 px-6 text-base font-medium rounded-t-lg border-b-2 border-indigo-500 text-indigo-600 bg-indigo-50">실험 DATA 입력</button>
                <button id="tab-output" class="whitespace-nowrap py-4 px-6 text-base font-medium rounded-t-lg border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 hover:bg-gray-50">실험 DATA 출력</button>
            </nav>
        </div>

        <!-- 탭 컨텐츠 -->
        <div>
            <!-- 데이터 입력 탭 -->
            <div id="content-input" class="tab-content active">
                <form id="data-form" class="space-y-6">
                    <p class="text-sm text-gray-500 pt-2">※ 슬립토크 실험의 결과값 입력시 '설정토크'란에 입력할 것.</p>
                    <div id="fields-container" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6"></div>
                    <div class="pt-6 flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4">
                        <button type="button" id="submit-button-keep" class="w-full px-4 py-3 font-semibold text-white bg-teal-600 rounded-lg hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 transition-colors duration-300 disabled:bg-gray-400 flex items-center justify-center">
                            <span class="button-text">데이터 저장 (입력값 유지)</span>
                            <span class="button-spinner hidden"><svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg></span>
                        </button>
                        <button type="button" id="submit-button-reset" class="w-full px-4 py-3 font-semibold text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-300 disabled:bg-gray-400 flex items-center justify-center">
                            <span class="button-text">데이터 저장 (입력값 초기화)</span>
                            <span class="button-spinner hidden"><svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg></span>
                        </button>
                    </div>
                </form>
            </div>

            <!-- 데이터 출력 탭 -->
            <div id="content-output" class="tab-content">
                <div class="space-y-4">
                    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 p-4 border rounded-lg">
                        <div>
                            <label for="search-product-type" class="block text-sm font-medium text-gray-700">제품 TYPE</label>
                            <select id="search-product-type" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm"></select>
                        </div>
                        <div class="relative">
                            <label for="search-product-trigger" class="block text-sm font-medium text-gray-700">실험 제품</label>
                            <button type="button" id="search-product-trigger" class="mt-1 relative w-full cursor-default rounded-md border border-gray-300 bg-white py-2 pl-3 pr-10 text-left shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-1 focus:ring-indigo-500">
                                <span class="block truncate" id="search-product-display">전체</span>
                                <span class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                                    <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M10 3a.75.75 0 01.53.22l3.5 3.5a.75.75 0 01-1.06 1.06L10 4.81 7.03 7.78a.75.75 0 01-1.06-1.06l3.5-3.5A.75.75 0 0110 3zm-3.72 9.28a.75.75 0 011.06 0L10 15.19l2.97-2.97a.75.75 0 111.06 1.06l-3.5 3.5a.75.75 0 01-1.06 0l-3.5-3.5a.75.75 0 010-1.06z" clip-rule="evenodd" /></svg>
                                </span>
                            </button>
                            <div id="search-product-options" class="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm hidden">
                                <div class="p-2 border-b">
                                    <input type="text" id="product-search-input" placeholder="제품 검색..." class="w-full px-2 py-1 border border-gray-300 rounded-md">
                                </div>
                                <div class="p-2 border-b">
                                    <label class="flex items-center space-x-3 cursor-pointer">
                                        <input type="checkbox" id="select-all-products" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500">
                                        <span class="font-semibold">전체 선택</span>
                                    </label>
                                </div>
                                <div id="search-product-checkbox-list" class="divide-y divide-gray-100"></div>
                            </div>
                        </div>
                        <div>
                            <label for="search-test-type" class="block text-sm font-medium text-gray-700">실험 구분</label>
                            <select id="search-test-type" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm">
                                <option value="">전체</option>
                                <option value="비틀림강성">비틀림강성</option>
                                <option value="슬립토크">슬립토크</option>
                                <option value="내구성실험">내구성실험</option>
                                <option value="기타">기타</option>
                            </select>
                        </div>
                        <div>
                            <label for="search-remarks" class="block text-sm font-medium text-gray-700">비고</label>
                            <input type="text" id="search-remarks" placeholder="비고 내용 일부 입력" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm">
                        </div>
                    </div>
                    <button id="search-button" class="w-full px-4 py-2 font-semibold text-white bg-blue-600 rounded-lg hover:bg-blue-700">데이터 조회</button>
                    <p class="text-sm text-gray-500 text-center pt-2">※ 슬립토크 실험의 결과는 '설정토크'로 출력됩니다.</p>
                </div>
                <div id="search-results" class="mt-6">
                    <div id="loader" class="loader hidden"></div>
                    <p id="no-results" class="text-center text-gray-500 hidden">조회된 데이터가 없습니다.</p>
                    <div class="overflow-x-auto">
                        <table id="results-table" class="min-w-full hidden">
                            <thead class="bg-gray-100"></thead>
                            <tbody class="bg-white"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="toast" class="toast"></div>
    <script>
        const SCRIPT_URL = "https://script.google.com/macros/s/AKfycbzx0TMTiMcmCn6MKdsMVW1KANugA4WTBHHK2iS6_wrFHHPZsHZ8vrMkhveLaODWhEqX/exec"; 
        const SHEET_HEADERS = [
            '실험 일자', '실험 장비', '실험 구분', '실험,작성자', '제품 TYPE', '실험 제품', 
            '고객사', '설정토크 (N.m)', '실험 최대토크 (N.m)', '실험 최소토크 (N.m)', 
            '실험 최대각도 (deg)', '실험 최소각도 (deg)', '내경1 (mm)', '내경2 (mm)', 
            '축삽입길이 - 내경1 (mm)', '축삽입길이 - 내경2 (mm)', '비틀림 강성 (N.m/rad)', 
            '데이터 취득 횟수', '비고'
        ];
        
        let productDataMap = {};

        const form = document.getElementById('data-form');
        const fieldsContainer = document.getElementById('fields-container');
        const submitButtonKeep = document.getElementById('submit-button-keep');
        const submitButtonReset = document.getElementById('submit-button-reset');
        const toast = document.getElementById('toast');
        const tabInput = document.getElementById('tab-input');
        const tabOutput = document.getElementById('tab-output');
        const contentInput = document.getElementById('content-input');
        const contentOutput = document.getElementById('content-output');
        const searchButton = document.getElementById('search-button');
        const loader = document.getElementById('loader');
        const noResults = document.getElementById('no-results');
        const resultsTable = document.getElementById('results-table');
        const productDropdownTrigger = document.getElementById('search-product-trigger');
        const productDropdownOptions = document.getElementById('search-product-options');

        function createFormFields() {
            SHEET_HEADERS.forEach(header => {
                const div = document.createElement('div');
                if (header === '비고') div.className = "sm:col-span-2 md:col-span-4";
                else if (['비틀림 강성 (N.m/rad)', '데이터 취득 횟수'].includes(header)) div.className = "sm:col-span-2 md:col-span-2";
                
                const label = document.createElement('label');
                label.htmlFor = `field-${header}`;
                label.className = "block text-sm font-medium text-gray-700";
                label.textContent = header;
                let fieldElement;

                if (header === '실험 장비') {
                    fieldElement = document.createElement('select');
                    const placeholder = new Option("장비를 선택하세요", "", true, true);
                    placeholder.disabled = true;
                    fieldElement.options.add(placeholder);
                    ['1호기(기산-20N.m)', '2호기(개조-200N.m)', '3호기(기산-2,000N.m)', '4호기(경성-50N.m)', '5호기(경성-1,000N.m)', '6호기(기산서보-200N.m)', '7호기(기산서보-20N.m)'].forEach(o => fieldElement.options.add(new Option(o, o)));
                } else if (header === '실험 구분') {
                    fieldElement = document.createElement('select');
                    const placeholder = new Option("구분을 선택하세요", "", true, true);
                    placeholder.disabled = true;
                    fieldElement.options.add(placeholder);
                    ['비틀림강성', '슬립토크', '내구성실험', '기타'].forEach(o => fieldElement.options.add(new Option(o, o)));
                } else if (header === '비고') {
                    fieldElement = document.createElement('textarea');
                    fieldElement.rows = 3; 
                } else if (header === '데이터 취득 횟수') {
                    fieldElement = document.createElement('input');
                    fieldElement.type = 'text'; fieldElement.disabled = true;
                } else if (header === '비틀림 강성 (N.m/rad)') {
                    fieldElement = document.createElement('input');
                    fieldElement.type = 'text'; fieldElement.disabled = true;
                    fieldElement.id = `field-${header}`; fieldElement.name = header;
                    fieldElement.className = "mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus-outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50";
                    
                    fieldElement.addEventListener('input', (e) => {
                        let value = e.target.value.replace(/[^0-9.]/g, '');
                        let parts = value.split('.');
                        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
                        e.target.value = parts.join('.');
                    });

                    const checkboxContainer = document.createElement('div');
                    checkboxContainer.className = "mt-2 flex items-center";
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox'; checkbox.id = 'enable-torsional-stiffness';
                    checkbox.className = 'h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500';
                    const checkboxLabel = document.createElement('label');
                    checkboxLabel.htmlFor = 'enable-torsional-stiffness';
                    checkboxLabel.className = 'ml-2 block text-sm text-gray-900';
                    checkboxLabel.textContent = '비틀림 강성 직접입력';
                    checkbox.addEventListener('change', (e) => {
                        const isChecked = e.target.checked;
                        fieldElement.disabled = !isChecked; fieldElement.required = isChecked;
                        if (!isChecked) fieldElement.value = '';
                        ['실험 최대토크 (N.m)', '실험 최소토크 (N.m)', '실험 최대각도 (deg)', '실험 최소각도 (deg)'].forEach(h => {
                            const input = document.getElementById(`field-${h}`);
                            if (input) { input.disabled = isChecked; if (isChecked) input.value = ''; }
                        });
                    });
                    checkboxContainer.append(checkbox, checkboxLabel);
                    div.append(label, fieldElement, checkboxContainer);
                    fieldsContainer.appendChild(div);
                    return;
                } else {
                    fieldElement = document.createElement('input');
                    fieldElement.type = (header === '실험 일자') ? 'date' : 'text';
                }
                
                fieldElement.id = `field-${header}`;
                fieldElement.name = header;
                if (['실험 일자', '실험 장비', '실험 구분', '실험,작성자'].includes(header)) {
                    fieldElement.required = true;
                }
                fieldElement.className = "mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus-outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50";
                div.append(label, fieldElement);
                fieldsContainer.appendChild(div);
            });
        }
        function showToast(message, isSuccess) {
            toast.textContent = message;
            toast.className = `toast show ${isSuccess ? 'bg-green-500' : 'bg-red-500'}`;
            setTimeout(() => { toast.className = toast.className.replace("show", ""); }, 3000);
        }
        const handleFormSubmit = (shouldReset, clickedButton) => {
            if (!form.checkValidity()) { form.reportValidity(); return; }
            if (!SCRIPT_URL) { showToast('스크립트 URL이 설정되지 않았습니다.', false); return; }
            const buttonText = clickedButton.querySelector('.button-text');
            const buttonSpinner = clickedButton.querySelector('.button-spinner');
            submitButtonKeep.disabled = true; submitButtonReset.disabled = true;
            buttonText.classList.add('hidden'); buttonSpinner.classList.remove('hidden');
            
            const formData = new FormData(form);
            const stiffnessInput = document.getElementById('field-비틀림 강성 (N.m/rad)');
            if (stiffnessInput) {
                const rawValue = stiffnessInput.value.replace(/,/g, '');
                formData.set('비틀림 강성 (N.m/rad)', rawValue);
            }

            const data = {};
            formData.forEach((value, key) => { data[key] = value; });
            fetch(SCRIPT_URL, { method: 'POST', mode: 'no-cors', cache: 'no-cache', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) })
            .then(res => {
                showToast('데이터가 성공적으로 저장되었습니다!', true);
                if (shouldReset) {
                    form.reset();
                    document.getElementById('enable-torsional-stiffness').checked = false;
                    const stiffnessInput = document.getElementById('field-비틀림 강성 (N.m/rad)');
                    stiffnessInput.disabled = true; stiffnessInput.required = false;
                    const dataCountInput = document.getElementById('field-데이터 취득 횟수');
                    dataCountInput.disabled = true; dataCountInput.required = false;
                    ['실험 최대토크 (N.m)', '실험 최소토크 (N.m)', '실험 최대각도 (deg)', '실험 최소각도 (deg)'].forEach(h => {
                        const input = document.getElementById(`field-${h}`);
                        if (input) input.disabled = false;
                    });
                }
            })
            .catch(err => { console.error("Error:", err); showToast('오류가 발생했습니다. 다시 시도해주세요.', false); })
            .finally(() => {
                submitButtonKeep.disabled = false; submitButtonReset.disabled = false;
                buttonText.classList.remove('hidden'); buttonSpinner.classList.add('hidden');
            });
        };

        const handleSearch = () => {
            loader.classList.remove('hidden');
            noResults.classList.add('hidden');
            resultsTable.classList.add('hidden');
            resultsTable.querySelector('tbody').innerHTML = '';
            
            const productType = document.getElementById('search-product-type').value;
            const checkedProducts = Array.from(document.querySelectorAll('#search-product-checkbox-list input[type="checkbox"]:checked')).map(cb => cb.value);
            const product = checkedProducts.join(',');
            const testType = document.getElementById('search-test-type').value;
            const remarks = document.getElementById('search-remarks').value;
            const params = new URLSearchParams({ action: 'search', productType, product, testType, remarks });
            
            fetch(`${SCRIPT_URL}?${params}`)
            .then(response => response.json())
            .then(data => {
                loader.classList.add('hidden');
                if (data.length === 0) {
                    noResults.classList.remove('hidden');
                } else {
                    displayResultsAsTable(data);
                }
            })
            .catch(err => {
                console.error("Search Error:", err);
                loader.classList.add('hidden');
                showToast('데이터 조회 중 오류가 발생했습니다.', false);
            });
        };
        
        const displayResultsAsTable = (data) => {
            const thead = resultsTable.querySelector('thead');
            const tbody = resultsTable.querySelector('tbody');
            thead.innerHTML = '';
            tbody.innerHTML = '';

            const headersToDisplay = [
                '실험 일자', '실험 장비', '실험 구분', '제품 TYPE', '실험 제품', 
                '설정토크 (N.m)', '내경1 (mm)', '내경2 (mm)', '비틀림 강성 (N.m/rad)', 
                '데이터 취득 횟수', '비고'
            ];

            const headerRow = document.createElement('tr');
            headersToDisplay.forEach(headerText => {
                const th = document.createElement('th');
                th.scope = 'col';
                th.className = 'px-6 py-3 text-center text-sm font-bold text-gray-700 uppercase tracking-wider border-b-2 border-gray-300 bg-gray-200';
                th.textContent = headerText;
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);

            data.forEach(rowData => {
                const row = document.createElement('tr');
                row.className = 'border-b border-gray-200 hover:bg-indigo-50 transition-colors duration-200';
                headersToDisplay.forEach(header => {
                    const td = document.createElement('td');
                    td.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-700 border-x border-gray-200';
                    
                    let value = rowData[header] || '';
                    if (header === '비틀림 강성 (N.m/rad)' && value) {
                        const numericValue = parseFloat(String(value).replace(/,/g, ''));
                        if (!isNaN(numericValue)) {
                            value = numericValue.toLocaleString('en-US');
                        }
                    }
                    td.textContent = value;
                    row.appendChild(td);
                });
                tbody.appendChild(row);
            });
            resultsTable.classList.remove('hidden');
        };

        const switchTab = (targetTab) => {
            const activeClasses = ['border-indigo-500', 'text-indigo-600', 'bg-indigo-50'];
            const inactiveClasses = ['border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300', 'hover:bg-gray-50'];
            let activeTab, inactiveTab, activeContent, inactiveContent;
            if (targetTab === 'input') {
                [activeTab, inactiveTab] = [tabInput, tabOutput];
                [activeContent, inactiveContent] = [contentInput, contentOutput];
            } else {
                [activeTab, inactiveTab] = [tabOutput, tabInput];
                [activeContent, inactiveContent] = [contentOutput, contentInput];
            }
            activeTab.classList.add(...activeClasses);
            activeTab.classList.remove(...inactiveClasses);
            inactiveTab.classList.add(...inactiveClasses);
            inactiveTab.classList.remove(...activeClasses);
            activeContent.classList.add('active');
            inactiveContent.classList.remove('active');
        };
        
        const populateSearchDropdowns = () => {
            fetch(`${SCRIPT_URL}?action=getUniqueValues`)
                .then(response => response.json())
                .then(data => {
                    productDataMap = data;
                    const productTypeSelect = document.getElementById('search-product-type');
                    productTypeSelect.innerHTML = '<option value="">전체</option>';
                    Object.keys(productDataMap).sort().forEach(type => {
                        productTypeSelect.options.add(new Option(type, type));
                    });
                    updateProductCheckboxes();
                })
                .catch(err => {
                    console.error("Error fetching unique values:", err);
                    showToast('검색 필터 목록을 불러오는 데 실패했습니다.', false);
                });
        };

        const updateProductCheckboxes = () => {
            const productTypeSelect = document.getElementById('search-product-type');
            const checkboxList = document.getElementById('search-product-checkbox-list');
            const selectedType = productTypeSelect.value;
            
            checkboxList.innerHTML = '';

            let productsToShow = [];
            if (selectedType && productDataMap[selectedType]) {
                productsToShow = productDataMap[selectedType];
            } else {
                const allProducts = new Set();
                for (const type in productDataMap) {
                    productDataMap[type].forEach(prod => allProducts.add(prod));
                }
                productsToShow = Array.from(allProducts).sort();
            }

            productsToShow.forEach(prod => {
                const itemDiv = document.createElement('div');
                itemDiv.className = 'relative cursor-default select-none py-2 pl-3 pr-9 text-gray-900 hover:bg-gray-100';
                const label = document.createElement('label');
                label.className = 'flex items-center space-x-3 cursor-pointer';
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = prod;
                checkbox.className = 'h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500';
                const span = document.createElement('span');
                span.textContent = prod;
                label.append(checkbox, span);
                itemDiv.appendChild(label);
                checkboxList.appendChild(itemDiv);
            });
            updateSelectAllState();
            updateProductDisplay();
        };
        
        const updateSelectAllState = () => {
            const selectAll = document.getElementById('select-all-products');
            const allCheckboxes = document.querySelectorAll('#search-product-checkbox-list input[type="checkbox"]');
            const allChecked = Array.from(allCheckboxes).every(cb => cb.checked);
            selectAll.checked = allCheckboxes.length > 0 && allChecked;
        };

        const updateProductDisplay = () => {
            const display = document.getElementById('search-product-display');
            const allCheckboxes = document.querySelectorAll('#search-product-checkbox-list input[type="checkbox"]');
            const checkedCheckboxes = document.querySelectorAll('#search-product-checkbox-list input[type="checkbox"]:checked');
            
            if (checkedCheckboxes.length === 0 || checkedCheckboxes.length === allCheckboxes.length) {
                display.textContent = '전체';
            } else if (checkedCheckboxes.length === 1) {
                display.textContent = checkedCheckboxes[0].value;
            } else {
                display.textContent = `${checkedCheckboxes.length}개 항목 선택됨`;
            }
        };

        document.addEventListener('DOMContentLoaded', () => {
            createFormFields();
            populateSearchDropdowns();
            
            document.getElementById('search-product-type').addEventListener('change', updateProductCheckboxes);
            
            productDropdownTrigger.addEventListener('click', () => {
                productDropdownOptions.classList.toggle('hidden');
            });

            document.getElementById('select-all-products').addEventListener('change', (e) => {
                const isChecked = e.target.checked;
                document.querySelectorAll('#search-product-checkbox-list input[type="checkbox"]').forEach(cb => {
                    cb.checked = isChecked;
                });
                updateProductDisplay();
            });

            productDropdownOptions.addEventListener('change', (e) => {
                if (e.target.type === 'checkbox') {
                    updateSelectAllState();
                    updateProductDisplay();
                }
            });

            document.getElementById('product-search-input').addEventListener('input', (e) => {
                const searchTerm = e.target.value.toLowerCase();
                document.querySelectorAll('#search-product-checkbox-list > div').forEach(itemDiv => {
                    const label = itemDiv.querySelector('label span');
                    if (label.textContent.toLowerCase().includes(searchTerm)) {
                        itemDiv.style.display = '';
                    } else {
                        itemDiv.style.display = 'none';
                    }
                });
            });

            document.addEventListener('click', (e) => {
                if (!productDropdownTrigger.contains(e.target) && !productDropdownOptions.contains(e.target)) {
                    productDropdownOptions.classList.add('hidden');
                }
            });

            submitButtonKeep.addEventListener('click', () => handleFormSubmit(false, submitButtonKeep));
            submitButtonReset.addEventListener('click', () => handleFormSubmit(true, submitButtonReset));
            tabInput.addEventListener('click', () => switchTab('input'));
            tabOutput.addEventListener('click', () => {
                switchTab('output');
                populateSearchDropdowns();
            });
            searchButton.addEventListener('click', handleSearch);

            const testTypeSelect = document.getElementById('field-실험 구분');
            const dataCountInput = document.getElementById('field-데이터 취득 횟수');
            if (testTypeSelect && dataCountInput) {
                testTypeSelect.addEventListener('change', (e) => {
                    const isDurabilityTest = e.target.value === '내구성실험';
                    dataCountInput.disabled = !isDurabilityTest;
                    dataCountInput.required = isDurabilityTest;
                    if (!isDurabilityTest) dataCountInput.value = '';
                });
            }
        });
    </script>
</body>
</html>
